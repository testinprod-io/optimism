import pickle
import json
from web3 import Web3
import base64
import rlp


ADDR_LEN = 20

def analysis(filename, key):
    account_keys = []
    account_num_with_balance_positive = 0
    with open(filename, "r") as f:
        root = json.loads(f.readline().strip())["root"]
        for line in f.readlines():
            account_data = json.loads(line.strip())
            account_key = account_data[key]
            account_keys.append(account_key)
            if int(account_data["balance"]) > 0:
                account_num_with_balance_positive += 1

    assert len(account_keys) == len(set(account_keys))
    return set(account_keys)



# block 4061224 has no txs.

# ./build/bin/geth --datadir=/Users/changwan.park/Downloads/goerli-bedrock-archive --nodiscover dump --nocode --nostorage --iterative --incompletes 4061223 > bedrock_entire_4061223_iterative_nocode_nostorage
bedrock_account_keys_4061223 = analysis("bedrock_entire_4061223_iterative_nocode_nostorage", "key")
assert len(bedrock_account_keys_4061223) == 76117

# ./build/bin/geth --datadir=/Users/changwan.park/Downloads/goerli-bedrock-archive --nodiscover dump --nocode --nostorage --iterative --incompletes 4061224 > bedrock_entire_4061224_iterative_nocode_nostorage
bedrock_account_keys_4061224 = analysis("bedrock_entire_4061224_iterative_nocode_nostorage", "key")
assert len(bedrock_account_keys_4061224) == 127608

for account_key in bedrock_account_keys_4061223:
    assert account_key in bedrock_account_keys_4061224

diff_keys = bedrock_account_keys_4061224 - bedrock_account_keys_4061223
assert len(diff_keys) == 51491

print("unknown preimage", len(diff_keys))

# USING_OVM=true ./build/bin/geth --datadir=/Users/changwan.park/Downloads/goerli-legacy-archive --nodiscover dump --iterative --nocode --nostorage 4061223 > legacy_entire_4061223_iterative_nocode_nostorage
legacy_account_addresses_4061223 = analysis("/Users/changwan.park/Documents/optimism/l2geth/legacy_entire_4061223_iterative_nocode_nostorage", "address")
assert len(legacy_account_addresses_4061223) == 76117

# every address hash preimage(address) present in legacy db
for address in legacy_account_addresses_4061223:
    address_hash = Web3.keccak(hexstr=address).hex()
    assert address_hash in bedrock_account_keys_4061223
# therefore elements in diff_keys do not have preimages

# dump every tx and get address from, to
# dump every tx receipt and get every contract creation
#  single tx can create multiple contract, so trace needed.


a = 0
maxBalance = -1
minBalance = 1 << 256
codeHashes = set()
nonces = set()
balances = set()


with open("bedrock_entire_4061224_iterative_nocode_nostorage", "r") as f:
    root = json.loads(f.readline().strip())["root"]
    for line in f.readlines():
        account_data = json.loads(line.strip())
        account_key = account_data["key"]
        if account_key in diff_keys:
            codeHash = account_data["codeHash"]
            nonce = account_data["nonce"]
            balance = int(account_data["balance"])
            codeHashes.add(codeHash)
            nonces.add(nonce)
            balances.add(balance)
            minBalance = min(minBalance, balance)
            if maxBalance < balance:
                maxBalance = balance
                # print(maxBalance, account_key)

# print(minBalance)
# every added account nonce == 0
# print(len(nonces), nonce)

# max account
assert "0xb961384378d60b3354f4bdc7fae4b81127ded5496fc3eab3ed28ea83edfb1c8e" in diff_keys
# found preimage of 0xb961384378d60b3354f4bdc7fae4b81127ded5496fc3eab3ed28ea83edfb1c8e
#  -> 0x6b1840480167c35cf0668a1A6262c433F90A4923
#   https://goerli-optimism.etherscan.io/address/0x6b1840480167c35cf0668a1a6262c433f90a4923
#  shows 500 eth deposited at 3900659
#   also confirmed using goerli.optimism.io rpc getBalance
#  lets observe legacy data
#   legacy data also contains info! (checked by rpc)
#  BUT DUMP(legacy_entire_4061223_iterative_nocode_nostorage) does not contain this.
#   l2geth dump error!
#   s.trie.GetKey("b961384378d60b3354f4bdc7fae4b81127ded5496fc3eab3ed28ea83edfb1c8e") does not work
#   hmm, why? is there another way?
# check how l2geth rpc fetched this balance info
#   ETH-OVM storage. thats why dump did not detect? not sure
# anyway lets dump every tx and store every [from, to] address + contract creation

addresses = set()
with open("/Users/changwan.park/Documents/optimism/l2geth/addresses_0_4061223") as f:
    for line in f.readlines():
        address = json.loads(line.strip())["address"]
        addresses.add(address)
    
# dumping preimage does not help?? check again
# did not find a single address preimage

preimages = set()
preimagelen = set()

# with open("/Users/changwan.park/Documents/optimism/l2geth/preimages_0_4061223_json") as f:
#     for line in f.readlines():
#         preimage = base64.b64decode(json.loads(line.strip())["preimage"])
#         preimagelen.add(len(preimage))
#         preimages.add(preimage)
        
# print("preimages len", len(preimages))

assert len(addresses) == 67464
recovered_preimages_1 = dict()

for address in addresses:
    address_hash = Web3.keccak(hexstr=address.lstrip("0x")).hex()
    if address_hash in diff_keys:
        recovered_preimages_1[address_hash] = address

print("recovered len 1", len(recovered_preimages_1))


recovered_preimages_2 = dict()
for preimage in preimages:
    if len(preimage) != ADDR_LEN:
        continue
    image = Web3.keccak(preimage).hex()
    if image in diff_keys:
        recovered_preimages_2[image] = preimage

print("recovered len 2", len(recovered_preimages_2))


recovered_preimages = recovered_preimages_1 or recovered_preimages_2

d = diff_keys - set(recovered_preimages.keys())
print(len(d), "preimages not found")



with open("address_from_event", "rb") as f:
    address_from_event = pickle.load(f)
print("cand address num", len(address_from_event))

recovered_preimages_3 = dict()
for address in address_from_event:
    key = Web3.keccak(hexstr=address).hex()
    if key in d:
        recovered_preimages_3[key] = address

print("recovered len 3", len(recovered_preimages_3))
d = d - set(recovered_preimages_3.keys())
print(len(d), "preimages not found")



with open("address_from_event_2", "rb") as f:
    address_from_event_2 = pickle.load(f)
print("cand address num", len(address_from_event_2))

recovered_preimages_4 = dict()
for address in address_from_event_2:
    key = Web3.keccak(hexstr=address).hex()
    if key in d:
        recovered_preimages_4[key] = address

print("recovered len 4", len(recovered_preimages_4))
d = d - set(recovered_preimages_4.keys())
print(len(d), "preimages not found")


with open("address_from_event_3", "rb") as f:
    address_from_event_3 = pickle.load(f)
print("cand address num", len(address_from_event_3))

recovered_preimages_5 = dict()
for address in address_from_event_3:
    key = Web3.keccak(hexstr=address).hex()
    if key in d:
        recovered_preimages_5[key] = address

print("recovered len 5", len(recovered_preimages_5))
d = d - set(recovered_preimages_5.keys())
print(len(d), "preimages not found")


with open("address_from_etherscan", "rb") as f:
    address_from_etherscan = pickle.load(f)
print("cand address num", len(address_from_etherscan))

recovered_preimages_6 = dict()
for address in address_from_etherscan:
    key = Web3.keccak(hexstr=address).hex()
    if key in d:
        recovered_preimages_6[key] = address

print("recovered len 6", len(recovered_preimages_6))
d = d - set(recovered_preimages_6.keys())
print(len(d), "preimages not found")



with open("trace_addr_750001_1000000", "rb") as f:
    test_addr = pickle.load(f)
print("cand address num", len(test_addr))

recovered_preimages_7 = dict()
for address in test_addr:
    try:
        key = Web3.keccak(hexstr=address).hex()
    except:
        print(address)
        continue
    if key in d:
        recovered_preimages_7[key] = address

print("recovered len 7", len(recovered_preimages_7))
d = d - set(recovered_preimages_7.keys())
print(len(d), "preimages not found")


with open("/Users/changwan.park/Documents/optimism/l2geth/parse/output.pickle", "rb") as f:
    test_addr = pickle.load(f)["address_set"]
print("cand address num", len(test_addr))

recovered_preimages_8 = dict()
for address in test_addr:
    key = Web3.keccak(hexstr=address).hex()
    if key in d:
        recovered_preimages_8[key] = address

print("recovered len 8", len(recovered_preimages_8))
d = d - set(recovered_preimages_8.keys())
print(len(d), "preimages not found")


with open("/Users/changwan.park/Documents/optimism/l2geth/parse/out_merged", "rb") as f:
    test_addr = pickle.load(f)
print("cand address num", len(test_addr))

recovered_preimages_9 = dict()
for address in test_addr:
    key = Web3.keccak(hexstr=address).hex()
    if key in d:
        recovered_preimages_9[key] = address

print("recovered len 9", len(recovered_preimages_9))
d = d - set(recovered_preimages_9.keys())
print(len(d), "preimages not found")



predeploy_preimage = dict()
start = 0x4200000000000000000000000000000000000000
for i in range(4096):
    address = hex(start + i)
    key = Web3.keccak(hexstr=address).hex()
    if key in d:
        predeploy_preimage[key] = address
print("recovered ", len(predeploy_preimage))
d = d - set(predeploy_preimage.keys())
print(len(d), "preimages not found")


start = 0xc0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d30000
predeploy_preimage_2 = dict()
for i in range(0x10000):
    address = hex(start + i)
    key = Web3.keccak(hexstr=address).hex()
    if key in d:
        predeploy_preimage_2[key] = address
print("recovered ", len(predeploy_preimage_2))
d = d - set(predeploy_preimage_2.keys())
print(len(d), "preimages not found")


predeploy_preimage_3 = dict()
god_tei = ['0x14dc79964da2c08b23698b3d3cc7ca32193d9955', '0x15d34aaf54267db7d7c367839aaf71a00a2c6a65', '0x1cbd3b2770909d4e10f157cabc84c7264073c9ec', '0x23618e81e3f5cdf7f54c3d65f7fbc0abf5b21e8f', '0x2546bcd3c84621e976d8185a91a922ae77ecec30', '0x3c44cdddb6a900fa2b585dd299e03d12fa4293bc', '0x70997970c51812dc3a010c7d01b50e0d17dc79c8', '0x71562b71999873db5b286df957af199ec94617f7', '0x71be63f3384f5fb98995898a86b02fb2426c5788', '0x8626f6940e2eb28930efb4cef49b2d1f2c9c1199', '0x90f79bf6eb2c4f870365e785982e1f101e93b906', '0x976ea74026e726554db657fa54763abd0c3a0aa9', '0x9965507d1a55bcc2695c58ba16fb37d819b0a4dc', '0xa0ee7a142d267c1f36714e4a8f75612f20a79720', '0xbcd4042de499d14e55001ccbb24a551f3b954096', '0xbda5747bfd65f08deb54cb465eb87d40e51b197e', '0xc0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d30000', '0xc0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d30002', '0xc0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d30007', '0xc0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d3000f', '0xc0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d30010', '0xc0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d30011', '0xc0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d30012', '0xc0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d30013', '0xc0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d30014', '0xc0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d30015', '0xc0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d30016', '0xc0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d30017', '0xc0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d30018', '0xc0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d30019', '0xc0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d3c0d3001a', '0xcd3b766ccdd6ae721141f452c550ca635964ce71', '0xdd2fd4581271e230360230f9337d5c0430bf44c0', '0xde3829a23df1479438622a08a116e8eb3f620bb5', '0xdeaddeaddeaddeaddeaddeaddeaddeaddead0000', '0xdf3e18d64bc6a983f673ab319ccae4f1a57c7097', '0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266', '0xfabb0ac9d68b0b445fb7357272ff202c5651694a']
god_tei += ['0x0000000000000000000000000000000000000000', '0x0000000000000000000000000000000000000001', '0x0000000000000000000000000000000000000002', '0x0000000000000000000000000000000000000003', '0x0000000000000000000000000000000000000004', '0x0000000000000000000000000000000000000005', '0x0000000000000000000000000000000000000006', '0x0000000000000000000000000000000000000007', '0x0000000000000000000000000000000000000008', '0x0000000000000000000000000000000000000009', '0x000000000000000000000000000000000000000a', '0x000000000000000000000000000000000000000b', '0x000000000000000000000000000000000000000c', '0x000000000000000000000000000000000000000d', '0x000000000000000000000000000000000000000e', '0x000000000000000000000000000000000000000f', '0x0000000000000000000000000000000000000010', '0x0000000000000000000000000000000000000011', '0x0000000000000000000000000000000000000012', '0x0000000000000000000000000000000000000013', '0x0000000000000000000000000000000000000014', '0x0000000000000000000000000000000000000015', '0x0000000000000000000000000000000000000016', '0x0000000000000000000000000000000000000017', '0x0000000000000000000000000000000000000018', '0x0000000000000000000000000000000000000019', '0x000000000000000000000000000000000000001a', '0x000000000000000000000000000000000000001b', '0x000000000000000000000000000000000000001c', '0x000000000000000000000000000000000000001d', '0x000000000000000000000000000000000000001e', '0x000000000000000000000000000000000000001f', '0x0000000000000000000000000000000000000020', '0x0000000000000000000000000000000000000021', '0x0000000000000000000000000000000000000022', '0x0000000000000000000000000000000000000023', '0x0000000000000000000000000000000000000024', '0x0000000000000000000000000000000000000025', '0x0000000000000000000000000000000000000026', '0x0000000000000000000000000000000000000027', '0x0000000000000000000000000000000000000028', '0x0000000000000000000000000000000000000029', '0x000000000000000000000000000000000000002a', '0x000000000000000000000000000000000000002b', '0x000000000000000000000000000000000000002c', '0x000000000000000000000000000000000000002d', '0x000000000000000000000000000000000000002e', '0x000000000000000000000000000000000000002f', '0x0000000000000000000000000000000000000030', '0x0000000000000000000000000000000000000031', '0x0000000000000000000000000000000000000032', '0x0000000000000000000000000000000000000033', '0x0000000000000000000000000000000000000034', '0x0000000000000000000000000000000000000035', '0x0000000000000000000000000000000000000036', '0x0000000000000000000000000000000000000037', '0x0000000000000000000000000000000000000038', '0x0000000000000000000000000000000000000039', '0x000000000000000000000000000000000000003a', '0x000000000000000000000000000000000000003b', '0x000000000000000000000000000000000000003c', '0x000000000000000000000000000000000000003d', '0x000000000000000000000000000000000000003e', '0x000000000000000000000000000000000000003f', '0x0000000000000000000000000000000000000040', '0x0000000000000000000000000000000000000041', '0x0000000000000000000000000000000000000042', '0x0000000000000000000000000000000000000043', '0x0000000000000000000000000000000000000044', '0x0000000000000000000000000000000000000045', '0x0000000000000000000000000000000000000046', '0x0000000000000000000000000000000000000047', '0x0000000000000000000000000000000000000048', '0x0000000000000000000000000000000000000049', '0x000000000000000000000000000000000000004a', '0x000000000000000000000000000000000000004b', '0x000000000000000000000000000000000000004c', '0x000000000000000000000000000000000000004d', '0x000000000000000000000000000000000000004e', '0x000000000000000000000000000000000000004f', '0x0000000000000000000000000000000000000050', '0x0000000000000000000000000000000000000051', '0x0000000000000000000000000000000000000052', '0x0000000000000000000000000000000000000053', '0x0000000000000000000000000000000000000054', '0x0000000000000000000000000000000000000055', '0x0000000000000000000000000000000000000056', '0x0000000000000000000000000000000000000057', '0x0000000000000000000000000000000000000058', '0x0000000000000000000000000000000000000059', '0x000000000000000000000000000000000000005a', '0x000000000000000000000000000000000000005b', '0x000000000000000000000000000000000000005c', '0x000000000000000000000000000000000000005d', '0x000000000000000000000000000000000000005e', '0x000000000000000000000000000000000000005f', '0x0000000000000000000000000000000000000060', '0x0000000000000000000000000000000000000061', '0x0000000000000000000000000000000000000062', '0x0000000000000000000000000000000000000063', '0x0000000000000000000000000000000000000064', '0x0000000000000000000000000000000000000065', '0x0000000000000000000000000000000000000066', '0x0000000000000000000000000000000000000067', '0x0000000000000000000000000000000000000068', '0x0000000000000000000000000000000000000069', '0x000000000000000000000000000000000000006a', '0x000000000000000000000000000000000000006b', '0x000000000000000000000000000000000000006c', '0x000000000000000000000000000000000000006d', '0x000000000000000000000000000000000000006e', '0x000000000000000000000000000000000000006f', '0x0000000000000000000000000000000000000070', '0x0000000000000000000000000000000000000071', '0x0000000000000000000000000000000000000072', '0x0000000000000000000000000000000000000073', '0x0000000000000000000000000000000000000074', '0x0000000000000000000000000000000000000075', '0x0000000000000000000000000000000000000076', '0x0000000000000000000000000000000000000077', '0x0000000000000000000000000000000000000078', '0x0000000000000000000000000000000000000079', '0x000000000000000000000000000000000000007a', '0x000000000000000000000000000000000000007b', '0x000000000000000000000000000000000000007c', '0x000000000000000000000000000000000000007d', '0x000000000000000000000000000000000000007e', '0x000000000000000000000000000000000000007f', '0x0000000000000000000000000000000000000080', '0x0000000000000000000000000000000000000081', '0x0000000000000000000000000000000000000082', '0x0000000000000000000000000000000000000083', '0x0000000000000000000000000000000000000084', '0x0000000000000000000000000000000000000085', '0x0000000000000000000000000000000000000086', '0x0000000000000000000000000000000000000087', '0x0000000000000000000000000000000000000088', '0x0000000000000000000000000000000000000089', '0x000000000000000000000000000000000000008a', '0x000000000000000000000000000000000000008b', '0x000000000000000000000000000000000000008c', '0x000000000000000000000000000000000000008d', '0x000000000000000000000000000000000000008e', '0x000000000000000000000000000000000000008f', '0x0000000000000000000000000000000000000090', '0x0000000000000000000000000000000000000091', '0x0000000000000000000000000000000000000092', '0x0000000000000000000000000000000000000093', '0x0000000000000000000000000000000000000094', '0x0000000000000000000000000000000000000095', '0x0000000000000000000000000000000000000096', '0x0000000000000000000000000000000000000097', '0x0000000000000000000000000000000000000098', '0x0000000000000000000000000000000000000099', '0x000000000000000000000000000000000000009a', '0x000000000000000000000000000000000000009b', '0x000000000000000000000000000000000000009c', '0x000000000000000000000000000000000000009d', '0x000000000000000000000000000000000000009e', '0x000000000000000000000000000000000000009f', '0x00000000000000000000000000000000000000a0', '0x00000000000000000000000000000000000000a1', '0x00000000000000000000000000000000000000a2', '0x00000000000000000000000000000000000000a3', '0x00000000000000000000000000000000000000a4', '0x00000000000000000000000000000000000000a5', '0x00000000000000000000000000000000000000a6', '0x00000000000000000000000000000000000000a7', '0x00000000000000000000000000000000000000a8', '0x00000000000000000000000000000000000000a9', '0x00000000000000000000000000000000000000aa', '0x00000000000000000000000000000000000000ab', '0x00000000000000000000000000000000000000ac', '0x00000000000000000000000000000000000000ad', '0x00000000000000000000000000000000000000ae', '0x00000000000000000000000000000000000000af', '0x00000000000000000000000000000000000000b0', '0x00000000000000000000000000000000000000b1', '0x00000000000000000000000000000000000000b2', '0x00000000000000000000000000000000000000b3', '0x00000000000000000000000000000000000000b4', '0x00000000000000000000000000000000000000b5', '0x00000000000000000000000000000000000000b6', '0x00000000000000000000000000000000000000b7', '0x00000000000000000000000000000000000000b8', '0x00000000000000000000000000000000000000b9', '0x00000000000000000000000000000000000000ba', '0x00000000000000000000000000000000000000bb', '0x00000000000000000000000000000000000000bc', '0x00000000000000000000000000000000000000bd', '0x00000000000000000000000000000000000000be', '0x00000000000000000000000000000000000000bf', '0x00000000000000000000000000000000000000c0', '0x00000000000000000000000000000000000000c1', '0x00000000000000000000000000000000000000c2', '0x00000000000000000000000000000000000000c3', '0x00000000000000000000000000000000000000c4', '0x00000000000000000000000000000000000000c5', '0x00000000000000000000000000000000000000c6', '0x00000000000000000000000000000000000000c7', '0x00000000000000000000000000000000000000c8', '0x00000000000000000000000000000000000000c9', '0x00000000000000000000000000000000000000ca', '0x00000000000000000000000000000000000000cb', '0x00000000000000000000000000000000000000cc', '0x00000000000000000000000000000000000000cd', '0x00000000000000000000000000000000000000ce', '0x00000000000000000000000000000000000000cf', '0x00000000000000000000000000000000000000d0', '0x00000000000000000000000000000000000000d1', '0x00000000000000000000000000000000000000d2', '0x00000000000000000000000000000000000000d3', '0x00000000000000000000000000000000000000d4', '0x00000000000000000000000000000000000000d5', '0x00000000000000000000000000000000000000d6', '0x00000000000000000000000000000000000000d7', '0x00000000000000000000000000000000000000d8', '0x00000000000000000000000000000000000000d9', '0x00000000000000000000000000000000000000da', '0x00000000000000000000000000000000000000db', '0x00000000000000000000000000000000000000dc', '0x00000000000000000000000000000000000000dd', '0x00000000000000000000000000000000000000de', '0x00000000000000000000000000000000000000df', '0x00000000000000000000000000000000000000e0', '0x00000000000000000000000000000000000000e1', '0x00000000000000000000000000000000000000e2', '0x00000000000000000000000000000000000000e3', '0x00000000000000000000000000000000000000e4', '0x00000000000000000000000000000000000000e5', '0x00000000000000000000000000000000000000e6', '0x00000000000000000000000000000000000000e7', '0x00000000000000000000000000000000000000e8', '0x00000000000000000000000000000000000000e9', '0x00000000000000000000000000000000000000ea', '0x00000000000000000000000000000000000000eb', '0x00000000000000000000000000000000000000ec', '0x00000000000000000000000000000000000000ed', '0x00000000000000000000000000000000000000ee', '0x00000000000000000000000000000000000000ef', '0x00000000000000000000000000000000000000f0', '0x00000000000000000000000000000000000000f1', '0x00000000000000000000000000000000000000f2', '0x00000000000000000000000000000000000000f3', '0x00000000000000000000000000000000000000f4', '0x00000000000000000000000000000000000000f5', '0x00000000000000000000000000000000000000f6', '0x00000000000000000000000000000000000000f7', '0x00000000000000000000000000000000000000f8', '0x00000000000000000000000000000000000000f9', '0x00000000000000000000000000000000000000fa', '0x00000000000000000000000000000000000000fb', '0x00000000000000000000000000000000000000fc', '0x00000000000000000000000000000000000000fd', '0x00000000000000000000000000000000000000fe', '0x00000000000000000000000000000000000000ff']
for address in god_tei:
    key = Web3.keccak(hexstr=address).hex()
    if key in d:
        predeploy_preimage_3[key] = address
print("recovered ", len(predeploy_preimage_3))
d = d - set(predeploy_preimage_3.keys())
print(len(d), "preimages not found")

print(d)
exit()


max_balance = -1
with open("bedrock_entire_4061224_iterative_nocode_nostorage", "r") as f:
    root = json.loads(f.readline().strip())["root"]
    for line in f.readlines():
        account_data = json.loads(line.strip())
        account_balance = int(account_data["balance"])
        account_key = account_data["key"]
        if account_key in d:
            if max_balance < account_balance:
                max_balance = account_balance
                print(max_balance)
print(max_balance)


# https://goerli-optimism.etherscan.io/address/0xefce38f31ebeb9637e85d3487595261fdf6ebeeb
# manual found 19815969382716803098
assert "0xfb61191820dcd5871f37ac4b5453fd676086dc9d3e7036551be34a3d462a84f7" in d
# block number 504627	 0x7b333

